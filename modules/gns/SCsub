#!/usr/bin/env python
Import("env")
Import("env_modules")

env_gns = env_modules.Clone()

# Third-party source files
thirdparty_obj = []

if env["builtin_gamenetworkingsockets"]:
    thirdparty_dir = "#thirdparty/gns/"
    
    # Generate protobuf headers if protoc is available
    import os
    import subprocess
    
    proto_dir = Dir(thirdparty_dir + "src/common/").abspath
    proto_files = [
        "steamnetworkingsockets_messages_certs.proto",
        "steamnetworkingsockets_messages.proto", 
        "steamnetworkingsockets_messages_udp.proto"
    ]
    
    # Check if protobuf headers need to be generated
    needs_protogen = False
    for proto_file in proto_files:
        pb_h_file = proto_file.replace(".proto", ".pb.h")
        if not os.path.exists(os.path.join(proto_dir, pb_h_file)):
            needs_protogen = True
            break
    
    if needs_protogen:
        # Try to generate protobuf headers
        try:
            protoc_cmd = ["protoc", "--cpp_out=" + proto_dir] + [os.path.join(proto_dir, f) for f in proto_files]
            subprocess.run(protoc_cmd, check=True, cwd=proto_dir)
            print("Generated GameNetworkingSockets protobuf headers")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("Warning: protoc not found or failed. GameNetworkingSockets protobuf headers not generated.")
            print("Install protobuf-compiler or provide pre-generated .pb.h files")
    
    # Add include paths
    env_gns.Prepend(CPPPATH=[
        thirdparty_dir + "include/",
        thirdparty_dir + "src/",
        thirdparty_dir + "src/public/",
        thirdparty_dir + "src/common/",
        thirdparty_dir + "src/steamnetworkingsockets/",
        thirdparty_dir + "src/steamnetworkingsockets/clientlib/",
        "#thirdparty/",
        "#thirdparty/google/protobuf/"
    ])
    
    # Don't include protobuf headers globally - GameNetworkingSockets should have its own protobuf handling
    # env_gns.Prepend(CPPPATH=["#thirdparty/google/protobuf/"])
    
    # Build with full feature set, work around GCC 15.1.0 protobuf compatibility issue
    env_gns.Append(CPPDEFINES=[
        "STEAMNETWORKINGSOCKETS_FOREXPORT", 
        "STEAMNETWORKINGSOCKETS_STATIC_LINK", 
        "STEAMNETWORKINGSOCKETS_OPENSOURCE",
        "VALVE_CRYPTO_OPENSSL"
    ])
    
    # Work around GCC 15.1.0 function overload issue with protobuf endian.h
    env_gns.Append(CXXFLAGS=["-Wno-error", "-DGOOGLE_PROTOBUF_ENDIAN_H__", "-include", "modules/gns/protobuf_compat.h"])
    
    # Platform-specific configuration
    if env["platform"] == "windows":
        env_gns.Append(LIBS=["ws2_32", "winmm", "bcrypt", "ntdll", "libprotobuf", "libssl", "libcrypto"])
    elif env["platform"] == "linuxbsd":
        env_gns.Append(LIBS=["pthread", "protobuf", "ssl", "crypto"])
        env_gns.Append(CPPDEFINES=["POSIX"])
    elif env["platform"] == "osx":
        env_gns.Append(FRAMEWORKS=["Security", "SystemConfiguration"])
        env_gns.Append(LIBS=["protobuf", "ssl", "crypto"])
    
    # GameNetworkingSockets core source files
    thirdparty_sources = [
        # Main client library
        "src/steamnetworkingsockets/clientlib/csteamnetworkingsockets.cpp",
        "src/steamnetworkingsockets/clientlib/csteamnetworkingmessages.cpp",
        "src/steamnetworkingsockets/clientlib/steamnetworkingsockets_connections.cpp",
        "src/steamnetworkingsockets/clientlib/steamnetworkingsockets_flat.cpp",
        "src/steamnetworkingsockets/clientlib/steamnetworkingsockets_lowlevel.cpp",
        "src/steamnetworkingsockets/clientlib/steamnetworkingsockets_p2p.cpp",
        "src/steamnetworkingsockets/clientlib/steamnetworkingsockets_p2p_ice.cpp",
        "src/steamnetworkingsockets/clientlib/steamnetworkingsockets_p2p_webrtc.cpp",
        "src/steamnetworkingsockets/clientlib/steamnetworkingsockets_snp.cpp",
        "src/steamnetworkingsockets/clientlib/steamnetworkingsockets_stun.cpp",
        "src/steamnetworkingsockets/clientlib/steamnetworkingsockets_udp.cpp",
        
        # Core shared functionality
        "src/steamnetworkingsockets/steamnetworkingsockets_shared.cpp",
        "src/steamnetworkingsockets/steamnetworkingsockets_certs.cpp",
        "src/steamnetworkingsockets/steamnetworkingsockets_certstore.cpp",
        "src/steamnetworkingsockets/steamnetworkingsockets_stats.cpp",
        "src/steamnetworkingsockets/steamnetworkingsockets_thinker.cpp",

        # Common utilities
        "src/common/crypto.cpp",
        "src/common/crypto_25519_donna.cpp",
        "src/common/crypto_25519_openssl.cpp",
        "src/common/crypto_bcrypt.cpp",
        "src/common/crypto_digest_opensslevp.cpp",
        "src/common/crypto_openssl.cpp",
        "src/common/crypto_sha1_wpa.cpp",
        "src/common/crypto_symmetric_opensslevp.cpp",
        "src/common/crypto_textencode.cpp",
        "src/common/keypair.cpp",
        "src/common/opensslwrapper.cpp",
        "src/common/steamid.cpp",
        
        # Tier0 and Tier1 utilities
        "src/tier0/dbg.cpp",
        "src/tier0/platformtime.cpp",
        "src/tier0/valve_tracelogging.cpp",
        "src/tier1/ipv6text.c",
        "src/tier1/netadr.cpp",
        "src/tier1/utlbuffer.cpp",
        "src/tier1/utlmemory.cpp",
        "src/vstdlib/strtools.cpp",
        
        # Generated protobuf sources (if they exist)
        "src/common/steamnetworkingsockets_messages_certs.pb.cc",
        "src/common/steamnetworkingsockets_messages.pb.cc",
        "src/common/steamnetworkingsockets_messages_udp.pb.cc",
    ]
    
    # Filter out protobuf sources that don't exist (in case protoc failed)
    existing_sources = []
    for src in thirdparty_sources:
        full_path = Dir(thirdparty_dir).abspath + src.replace("src/", "/src/")
        if src.endswith(".pb.cc"):
            if os.path.exists(full_path):
                existing_sources.append(src)
        else:
            existing_sources.append(src)
    
    thirdparty_sources = [thirdparty_dir + file for file in existing_sources]
    
    # Build third-party code with warnings disabled
    env_thirdparty = env_gns.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
    env.modules_sources += thirdparty_obj

# Godot module source files
module_obj = []
env_gns.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Force rebuilding module when thirdparty changes
env.Depends(module_obj, thirdparty_obj)

# Add required libraries last for proper link order
if env["platform"] == "linuxbsd":
    env.Append(LIBS=["protobuf", "ssl", "crypto"])